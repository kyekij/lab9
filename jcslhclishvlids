bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300   1) using ConsoleTree;
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300   2) using NUnit.Framework;
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300   3) using System;
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300   4) using static ConsoleTree.MainClass;
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300   5) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300   6) namespace TestProject1
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300   7) {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300   8)     public class Tests
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300   9)     {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  10)         [SetUp]
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  11)         public void Setup()
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  12)         {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  13)         }
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  14) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  15)         [Test]
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  16)         public void Test1()
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  17)         {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  18)             Assert.Pass();
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  19)         }
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  20)     }
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  21) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  22)     public class NodeTests
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  23)     {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  24)         [Test]
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  25)         public void AddChild_ValidChild_NodeHasChild()
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  26)         {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  27)             // Arrange
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  28)             Node parentNode = new Node("ParentNode");
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  29)             Node childNode = new Node("ChildNode");
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  30) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  31)             // Act
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  32)             parentNode.AddChild(childNode);
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  33) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  34)             // Assert
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  35)             Assert.IsTrue(parentNode.Children.Contains(childNode));
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  36)         }
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  37) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  38)         [Test]
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  39)         public void AddChild_NullChild_ThrowsArgumentNullException()
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  40)         {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  41)             // Arrange
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  42)             Node parentNode = new Node("ParentNode");
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  43) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  44)             // Act & Assert
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  45)             Assert.Throws<ArgumentNullException>(() => parentNode.AddChild(null));
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  46)         }
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  47) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  48)         [Test]
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  49)         public void AddChild_SameChildTwice_ThrowsInvalidOperationException()
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  50)         {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  51)             // Arrange
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  52)             Node parentNode = new Node("ParentNode");
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  53)             Node childNode = new Node("ChildNode");
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  54)             parentNode.AddChild(childNode);
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  55) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  56)             // Act & Assert
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  57)             Assert.Throws<InvalidOperationException>(() => parentNode.AddChild(childNode));
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  58)         }
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  59)     }
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  60) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  61)     [TestFixture]
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  62)     public class LeafTests
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  63)     {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  64)         [Test]
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  65)         public void LeafConstructor_ValidName_NameMatches()
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  66)         {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  67)             // Arrange
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  68)             string name = "LeafName";
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  69) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  70)             // Act
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  71)             Leaf leaf = new Leaf(name);
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  72) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  73)             // Assert
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  74)             Assert.AreEqual(name, leaf.Name);
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  75)         }
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  76) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  77)         [Test]
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  78)         public void LeafConstructor_EmptyName_ThrowsArgumentException()
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  79)         {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  80)             // Arrange
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  81)             string name = "";
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  82) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  83)             // Act & Assert
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  84)             Assert.Throws<ArgumentException>(() => new Leaf(name));
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  85)         }
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  86) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  87)     }
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  88) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  89)     [TestFixture]
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  90)     public class MainClassTests
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  91)     {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  92)         [Test]
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  93)         public void NodeConstructor_ValidName_NameMatches()
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  94)         {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  95)             // Arrange
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  96)             string name = "NodeName";
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  97) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  98)             // Act
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300  99)             Node node = new Node(name);
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 100) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 101)             // Assert
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 102)             Assert.AreEqual(name, node.Name);
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 103)         }
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 104) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 105)         [Test]
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 106)         public void NodeAddChild_ValidChild_ChildAdded()
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 107)         {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 108)             // Arrange
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 109)             Node parentNode = new Node("ParentNode");
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 110)             Node childNode = new Node("ChildNode");
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 111) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 112)             // Act
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 113)             parentNode.AddChild(childNode);
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 114) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 115)             // Assert
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 116)             Assert.IsTrue(parentNode.Children.Contains(childNode));
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 117)         }
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 118) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 119)         [Test]
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 120)         public void NodeAddChild_NullChild_ThrowsArgumentNullException()
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 121)         {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 122)             // Arrange
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 123)             Node parentNode = new Node("ParentNode");
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 124) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 125)             // Act & Assert
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 126)             Assert.Throws<ArgumentNullException>(() => parentNode.AddChild(null));
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 127)         }
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 128) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 129)         [Test]
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 130)         public void LeafConstructor_ValidName_NameMatches()
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 131)         {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 132)             // Arrange
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 133)             string name = "LeafName";
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 134) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 135)             // Act
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 136)             Leaf leaf = new Leaf(name);
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 137) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 138)             // Assert
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 139)             Assert.AreEqual(name, leaf.Name);
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 140)         }
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 141) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 142)         [Test]
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 143)         public void LeafConstructor_EmptyName_ThrowsArgumentException()
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 144)         {
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 145)             // Arrange
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 146)             string name = "";
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 147) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 148)             // Act & Assert
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 149)             Assert.Throws<ArgumentException>(() => new Leaf(name));
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 150)         }
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 151) 
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 152)     }
bb90c7a7 (Мария Демченко 2024-04-18 00:14:29 +0300 153) }
